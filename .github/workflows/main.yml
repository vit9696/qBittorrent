name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-15]

    name: Build qBittorrent for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set edition
        run: |
          QBITTORRENT_EDITION=$(git rev-list --count --first-parent HEAD)
          echo "QBITTORRENT_EDITION=${QBITTORRENT_EDITION}" >> "$GITHUB_ENV"

      - name: Update brew
        run: brew update

      - name: Install dependencies
        run: brew install openssl qt cmake ninja boost create-dmg

      - name: Compile with codesign
        if: github.repository_owner == 'vit9696'
        env:
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          MAC_ACCOUNT_NAME: ${{ secrets.MAC_ACCOUNT_NAME }}
          MAC_ACCOUNT_PASSWORD: ${{ secrets.MAC_ACCOUNT_PASSWORD }}
        run: |
          curl -OL "https://github.com/acidanthera/ocbuild/raw/master/codesign/appsign.sh" || exit 1
          chmod a+x appsign.sh || exit 1
          DEPLOY_SCRIPT="$(pwd)/appsign.sh" ./qbittorrent.sh

      - name: Compile without codesign
        if: github.repository_owner != 'vit9696'
        run: ./qbittorrent.sh

      - name: Create release notes
        run: git show -s --format="%s" > release_notes.md

      - name: Create release
        if: github.repository_owner == 'vit9696'
        uses: ncipollo/release-action@v1
        with:
          # Create release on each commit
          token: ${{ secrets.GITHUB_TOKEN }}
          name: qbittorrent ${{ env.VERSION }} (${{ env.REVISION }})
          commit: ${{ github.sha }}
          tag: ${{ env.REVISION }}
          bodyFile: release_notes.md
          draft: false
          prerelease: false
          # Upload artifacts
          artifacts: dist/${{ env.FILENAME }}
          artifactContentType: ${{ env.CONTENT_TYPE }}
          # Allow parallel releases, which only add new artifacts.
          allowUpdates: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          removeArtifacts: false
          replacesArtifacts: false
